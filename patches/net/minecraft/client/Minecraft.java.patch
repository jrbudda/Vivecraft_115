--- a/net/minecraft/client/Minecraft.java
+++ b/net/minecraft/client/Minecraft.java
@@ -202,8 +202,12 @@
 import net.minecraft.world.storage.SaveFormat;
 import net.minecraft.world.storage.SaveHandler;
 import net.minecraft.world.storage.WorldInfo;
+import net.optifine.reflect.Reflector;
+import net.optifine.reflect.ReflectorConstructor;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.vivecraft.render.PlayerModelController;
 
 public class Minecraft extends RecursiveEventLoop<Runnable> implements ISnooperInfo, IWindowEventListener
 {
@@ -321,7 +325,10 @@
     public Minecraft(GameConfiguration p_i801_1_)
     {
         super("Client");
-        instance = this;
+        instance = this;      
+        //Forge
+        Reflector.call(Reflector.ForgeHooksClient_invalidateLog4jThreadCache);
+        //
         this.gameDir = p_i801_1_.folderInfo.gameDir;
         File file1 = p_i801_1_.folderInfo.assetsDir;
         this.fileResourcepacks = p_i801_1_.folderInfo.resourcePacksDir;
@@ -336,7 +343,9 @@
         this.sessionService = (new YggdrasilAuthenticationService(this.proxy, UUID.randomUUID().toString())).createMinecraftSessionService();
         this.session = p_i801_1_.userInfo.session;
         LOGGER.info("Setting user: {}", (Object)this.session.getUsername());
-        LOGGER.debug("(Session ID is {})", (Object)this.session.getSessionID());
+        //Forge
+        //LOGGER.debug("(Session ID is {})", (Object)this.session.getSessionID());
+        //
         this.isDemo = p_i801_1_.gameInfo.isDemo;
         this.jvm64bit = isJvm64bit();
         this.integratedServer = null;
@@ -376,9 +385,13 @@
             screensize = p_i801_1_.displayInfo;
         }
 
+        //Forge - uh what?
+        Reflector.call(Reflector.getFieldValue(Reflector.EarlyProgressVisualization_INSTANCE), Reflector.EarlyProgressVisualization_join);
+        //
+        
         Util.nanoTimeSupplier = RenderSystem.initBackendSystem();
         this.virtualScreen = new VirtualScreen(this);
-        this.mainWindow = this.virtualScreen.create(screensize, this.gameSettings.fullscreenResolution, this.func_230149_ax_());
+        this.mainWindow = this.virtualScreen.create(screensize, this.gameSettings.fullscreenResolution, this.minecriftVerString);
         this.setGameFocused(true);
 
         try
@@ -394,13 +407,18 @@
 
         this.mainWindow.setFramerateLimit(this.gameSettings.framerateLimit);
         this.mouseHelper = new MouseHelper(this);
-        this.mouseHelper.registerCallbacks(this.mainWindow.getHandle());
+        //Forge ??
+        //this.mouseHelper.registerCallbacks(this.mainWindow.getHandle());
+        //
         this.keyboardListener = new KeyboardListener(this);
         this.keyboardListener.setupCallbacks(this.mainWindow.getHandle());
         RenderSystem.initRenderer(this.gameSettings.glDebugVerbosity, false);
         this.framebuffer = new Framebuffer(this.mainWindow.getFramebufferWidth(), this.mainWindow.getFramebufferHeight(), true, IS_RUNNING_ON_MAC);
         this.framebuffer.setFramebufferColor(0.0F, 0.0F, 0.0F, 0.0F);
         this.resourceManager = new SimpleReloadableResourceManager(ResourcePackType.CLIENT_RESOURCES, this.thread);
+        //Forge
+        Reflector.call(Reflector.ClientModLoader_begin, this, this.resourcePackRepository, this.resourceManager, this.packFinder);
+        //
         this.gameSettings.fillResourcePackList(this.resourcePackRepository);
         this.resourcePackRepository.reloadPacksFromFinders();
         this.languageManager = new LanguageManager(this.gameSettings.language);
@@ -449,12 +467,26 @@
             this.populateSearchTreeManager();
             this.resourceManager.addReloadListener(this.searchTreeManager);
             this.particles = new ParticleManager(this.world, this.textureManager);
+            //Forge
+            Reflector.call(Reflector.call(Reflector.fml_ModLoader_get), Reflector.fml_ModLoader_postEvent, Reflector.newInstance(Reflector.ParticleFactoryRegisterEvent_Constructor));
+            //
             this.resourceManager.addReloadListener(this.particles);
             this.paintingSprites = new PaintingSpriteUploader(this.textureManager);
             this.resourceManager.addReloadListener(this.paintingSprites);
             this.potionSprites = new PotionSpriteUploader(this.textureManager);
             this.resourceManager.addReloadListener(this.potionSprites);
-            this.ingameGUI = new IngameGui(this);
+
+            //Forge
+            if(Reflector.ForgeIngameGui_Constructor.exists())
+            	this.ingameGUI = (IngameGui) Reflector.newInstance(Reflector.ForgeIngameGui_Constructor, this);
+            else
+            	this.ingameGUI = new IngameGui(this);
+            //Forge
+            
+            //Forge
+            this.mouseHelper.registerCallbacks(this.mainWindow.getHandle()); //Forge: Moved below ingameGUI setting to prevent NPEs in handeler.
+            //
+            
             this.debugRenderer = new DebugRenderer(this);
             RenderSystem.setErrorCallback(this::disableVSyncAfterGlError);
 
@@ -469,15 +501,19 @@
             this.mainWindow.setLogOnGlError();
             this.updateWindowSize();
 
-            if (s != null)
-            {
-                this.displayGuiScreen(new ConnectingScreen(new MainMenuScreen(), this, s, i));
-            }
-            else
-            {
-                this.displayGuiScreen(new MainMenuScreen(true));
-            }
-
+            //forge - fix vanilla bug
+//            if (s != null)
+//            {
+//                this.displayGuiScreen(new ConnectingScreen(new MainMenuScreen(), this, s, i));
+//            }
+//            else
+//            {
+//                this.displayGuiScreen(new MainMenuScreen(true));
+//            }
+            final String autoServerName = s;
+            final int autoServerPort = i;
+            //
+            
             ResourceLoadProgressGui.loadLogoTexture(this);
             List<IResourcePack> list = this.resourcePackRepository.getEnabledPacks().stream().map(ResourcePackInfo::getResourcePack).collect(Collectors.toList());
             this.setLoadingGui(new ResourceLoadProgressGui(this, this.resourceManager.reloadResources(Util.getServerExecutor(), this, RESOURCE_RELOAD_INIT_TASK, list), (p_229990_2_) ->
@@ -489,6 +525,17 @@
                     {
                         this.checkMissingData();
                     }
+                    //Forge
+                    
+                    if (Reflector.callBoolean(Reflector.ClientModLoader_completeModLoading)) return; // Do not overwrite the error screen
+                    // FORGE: Move opening initial screen to after startup and events are enabled.
+                    // Also Fixes MC-145102
+                    if (autoServerName != null) {
+                       this.displayGuiScreen(new ConnectingScreen(new MainMenuScreen(), this, autoServerName, autoServerPort));
+                    } else {
+                       this.displayGuiScreen(new MainMenuScreen(true));
+                    }
+                    //
                 });
             }, false));
         }
@@ -501,12 +548,12 @@
 
     private String func_230149_ax_()
     {
-        StringBuilder stringbuilder = new StringBuilder("Minecraft");
+        StringBuilder stringbuilder = new StringBuilder(minecriftVerString);
 
-        if (this.func_230151_c_())
-        {
-            stringbuilder.append("*");
-        }
+//        if (this.func_230151_c_())
+//        {
+//            stringbuilder.append("*");
+//        }
 
         stringbuilder.append(" ");
         stringbuilder.append(SharedConstants.getVersion().getName());
@@ -639,8 +686,13 @@
             return Stream.of(Registry.ITEM.getKey(p_213251_0_.getItem()));
         });
         SearchTreeReloadable<ItemStack> searchtreereloadable = new SearchTreeReloadable<>((p_213235_0_) ->
-        {
-            return ItemTags.getCollection().getOwningTags(p_213235_0_.getItem()).stream();
+        {      	
+        	//Forge
+        	if(Reflector.ForgeItem_getTags.exists())
+        		return ((java.util.Set) Reflector.call(p_213235_0_.getItem(),Reflector.ForgeItem_getTags)).stream();
+        	else
+        		return ItemTags.getCollection().getOwningTags(p_213235_0_.getItem()).stream();
+        	//
         });
         NonNullList<ItemStack> nonnulllist = NonNullList.create();
 
@@ -749,18 +801,27 @@
 
         if (report.getFile() != null)
         {
-            Bootstrap.printToSYSOUT("#@!@# Game crashed! Crash report saved to: #@!@# " + report.getFile());
-            System.exit(-1);
+        	Bootstrap.printToSYSOUT("#@!@# Game crashed! Crash report saved to: #@!@# " + report.getFile());
+        	if(Reflector.ServerLifecycleHooks_handleExit.exists())
+        		Reflector.call(Reflector.ServerLifecycleHooks_handleExit, -1);
+        	else
+        		System.exit(-1);
         }
         else if (report.saveToFile(file2))
         {
             Bootstrap.printToSYSOUT("#@!@# Game crashed! Crash report saved to: #@!@# " + file2.getAbsolutePath());
-            System.exit(-1);
+        	if(Reflector.ServerLifecycleHooks_handleExit.exists())
+        		Reflector.call(Reflector.ServerLifecycleHooks_handleExit, -1);
+        	else
+        		System.exit(-1);
         }
         else
         {
             Bootstrap.printToSYSOUT("#@?@# Game crashed! Crash report could not be saved. #@?@#");
-            System.exit(-2);
+        	if(Reflector.ServerLifecycleHooks_handleExit.exists())
+        		Reflector.call(Reflector.ServerLifecycleHooks_handleExit, -2);
+        	else
+        		System.exit(-2);
         }
     }
 
@@ -874,11 +935,13 @@
 
     public void displayGuiScreen(@Nullable Screen guiScreenIn)
     {
-        if (this.currentScreen != null)
-        {
-            this.currentScreen.removed();
-        }
-
+    	//Forge
+//        if (this.currentScreen != null)
+//        {
+//            this.currentScreen.removed();
+//        }
+        //
+        
         if (guiScreenIn == null && this.world == null)
         {
             guiScreenIn = new MainMenuScreen();
@@ -894,7 +957,16 @@
                 this.player.respawnPlayer();
             }
         }
-
+        //Forge
+        Screen old = this.currentScreen;
+        Object event = Reflector.newInstance(Reflector.GuiOpenEvent_Constructor, guiScreenIn);
+        if(event != null) {
+        	if (Reflector.postForgeBusEvent(event)) return;
+        	guiScreenIn = (Screen) Reflector.call(event,Reflector.GuiOpenEvent_getGui);
+        }
+        if (old != null && guiScreenIn != old)
+           old.removed();
+        //
         if (guiScreenIn instanceof MainMenuScreen || guiScreenIn instanceof MultiplayerScreen)
         {
             this.gameSettings.showDebugInfo = false;
@@ -1062,11 +1134,14 @@
 
         if (!this.skipRenderWorld)
         {
+            Reflector.call(Reflector.BasicEventHooks_onRenderTickStart, this.timer.renderPartialTicks);
             this.profiler.endStartSection("gameRenderer");
             this.gameRenderer.updateCameraAndRender(this.isGamePaused ? this.renderPartialTicksPaused : this.timer.renderPartialTicks, i, renderWorldIn);
             this.profiler.endStartSection("toasts");
             this.toastGui.render();
             this.profiler.endSection();
+            Reflector.call(Reflector.BasicEventHooks_onRenderTickEnd, this.timer.renderPartialTicks);
+
         }
 
         this.profiler.endTick();
@@ -1376,34 +1451,53 @@
 
     private void sendClickBlockToController(boolean leftClick)
     {
-        if (!leftClick)
-        {
-            this.leftClickCounter = 0;
-        }
-
-        if (this.leftClickCounter <= 0 && !this.player.isHandActive())
-        {
-            if (leftClick && this.objectMouseOver != null && this.objectMouseOver.getType() == RayTraceResult.Type.BLOCK)
-            {
-                BlockRayTraceResult blockraytraceresult = (BlockRayTraceResult)this.objectMouseOver;
-                BlockPos blockpos = blockraytraceresult.getPos();
-
-                if (!this.world.getBlockState(blockpos).isAir())
-                {
-                    Direction direction = blockraytraceresult.getFace();
-
-                    if (this.playerController.onPlayerDamageBlock(blockpos, direction))
-                    {
-                        this.particles.addBlockHitEffects(blockpos, direction);
-                        this.player.swingArm(Hand.MAIN_HAND);
-                    }
-                }
-            }
-            else
-            {
-                this.playerController.resetBlockRemoving();
-            }
-        }
+    	if (!leftClick)
+    	{
+    		this.leftClickCounter = 0;
+    	}
+
+    	if (this.leftClickCounter <= 0 && !this.player.isHandActive())
+    	{
+    		if (leftClick && this.objectMouseOver != null && this.objectMouseOver.getType() == RayTraceResult.Type.BLOCK)
+    		{
+    			BlockRayTraceResult blockraytraceresult = (BlockRayTraceResult)this.objectMouseOver;
+    			BlockPos blockpos = blockraytraceresult.getPos();
+
+    			Object inputEvent = null;
+    			if (!this.world.isAirBlock(blockpos)) {
+    				//Forge
+    				inputEvent = Reflector.call(Reflector.ForgeHooksClient_OnClickInput, 0, this.gameSettings.keyBindAttack, Hand.MAIN_HAND);
+    				if (inputEvent !=null && Reflector.callBoolean(inputEvent,  Reflector.Event_isCanceled)) {
+    					if (Reflector.callBoolean(inputEvent, Reflector.ClickInputEvent_shouldSwingHand)) {
+    						this.particles.addBlockHitEffects(blockpos, blockraytraceresult);
+    						this.player.swingArm(Hand.MAIN_HAND);
+    					}
+    					return;
+    				}
+    				//
+    				Direction direction = blockraytraceresult.getFace();
+
+    				if (this.playerController.onPlayerDamageBlock(blockpos, direction))
+    				{
+    					//Forge
+    					if(inputEvent != null) {
+    						if (Reflector.callBoolean(inputEvent, Reflector.ClickInputEvent_shouldSwingHand)) {
+    							this.particles.addBlockHitEffects(blockpos, blockraytraceresult);
+    							this.player.swingArm(Hand.MAIN_HAND);
+    						}
+    						//
+    					} else {
+    						this.particles.addBlockHitEffects(blockpos, direction);
+    						this.player.swingArm(Hand.MAIN_HAND);
+    					}
+    				}
+    			}
+    		}
+    		else
+    		{
+    			this.playerController.resetBlockRemoving();
+    		}
+    	}
     }
 
     private void clickMouse()
@@ -1421,6 +1515,12 @@
             }
             else if (!this.player.isRowingBoat())
             {
+            	Object inputEvent;
+            	//Forge
+				inputEvent = Reflector.call(Reflector.ForgeHooksClient_OnClickInput, 0, this.gameSettings.keyBindAttack, Hand.MAIN_HAND);
+
+                if (inputEvent == null || !Reflector.callBoolean(inputEvent,  Reflector.Event_isCanceled))
+                	//
                 switch (this.objectMouseOver.getType())
                 {
                     case ENTITY:
@@ -1431,7 +1531,7 @@
                         BlockRayTraceResult blockraytraceresult = (BlockRayTraceResult)this.objectMouseOver;
                         BlockPos blockpos = blockraytraceresult.getPos();
 
-                        if (!this.world.getBlockState(blockpos).isAir())
+                        if (!this.world.isAirBlock(blockpos))
                         {
                             this.playerController.clickBlock(blockpos, blockraytraceresult.getFace());
                             break;
@@ -1444,101 +1544,122 @@
                         }
 
                         this.player.resetCooldown();
-                }
-
-                this.player.swingArm(Hand.MAIN_HAND);
+                        //Forge
+                        Reflector.call(Reflector.ForgeHooks_onEmptyLeftClick, this.player);
+                        //
+                }
+                
+                if (inputEvent == null || Reflector.callBoolean(inputEvent, Reflector.ClickInputEvent_shouldSwingHand))
+                	this.player.swingArm(Hand.MAIN_HAND);
             }
         }
     }
 
     private void rightClickMouse()
     {
-        if (!this.playerController.getIsHittingBlock())
-        {
-            this.rightClickDelayTimer = 4;
-
-            if (!this.player.isRowingBoat())
-            {
-                if (this.objectMouseOver == null)
-                {
-                    LOGGER.warn("Null returned as 'hitResult', this shouldn't happen!");
-                }
-
-                for (Hand hand : Hand.values())
-                {
-                    ItemStack itemstack = this.player.getHeldItem(hand);
-
-                    if (this.objectMouseOver != null)
-                    {
-                        switch (this.objectMouseOver.getType())
-                        {
-                            case ENTITY:
-                                EntityRayTraceResult entityraytraceresult = (EntityRayTraceResult)this.objectMouseOver;
-                                Entity entity = entityraytraceresult.getEntity();
-                                ActionResultType actionresulttype = this.playerController.interactWithEntity(this.player, entity, entityraytraceresult, hand);
-
-                                if (!actionresulttype.isSuccessOrConsume())
-                                {
-                                    actionresulttype = this.playerController.interactWithEntity(this.player, entity, hand);
-                                }
-
-                                if (actionresulttype.isSuccessOrConsume())
-                                {
-                                    if (actionresulttype.isSuccess())
-                                    {
-                                        this.player.swingArm(hand);
-                                    }
-
-                                    return;
-                                }
-
-                                break;
-
-                            case BLOCK:
-                                BlockRayTraceResult blockraytraceresult = (BlockRayTraceResult)this.objectMouseOver;
-                                int i = itemstack.getCount();
-                                ActionResultType actionresulttype1 = this.playerController.func_217292_a(this.player, this.world, hand, blockraytraceresult);
-
-                                if (actionresulttype1.isSuccessOrConsume())
-                                {
-                                    if (actionresulttype1.isSuccess())
-                                    {
-                                        this.player.swingArm(hand);
-
-                                        if (!itemstack.isEmpty() && (itemstack.getCount() != i || this.playerController.isInCreativeMode()))
-                                        {
-                                            this.gameRenderer.itemRenderer.resetEquippedProgress(hand);
-                                        }
-                                    }
-
-                                    return;
-                                }
-
-                                if (actionresulttype1 == ActionResultType.FAIL)
-                                {
-                                    return;
-                                }
-                        }
-                    }
-
-                    if (!itemstack.isEmpty())
-                    {
-                        ActionResultType actionresulttype2 = this.playerController.processRightClick(this.player, this.world, hand);
-
-                        if (actionresulttype2.isSuccessOrConsume())
-                        {
-                            if (actionresulttype2.isSuccess())
-                            {
-                                this.player.swingArm(hand);
-                            }
-
-                            this.gameRenderer.itemRenderer.resetEquippedProgress(hand);
-                            return;
-                        }
-                    }
-                }
-            }
-        }
+    	if (!this.playerController.getIsHittingBlock())
+    	{
+    		this.rightClickDelayTimer = 4;
+
+    		if (!this.player.isRowingBoat())
+    		{
+    			if (this.objectMouseOver == null)
+    			{
+    				LOGGER.warn("Null returned as 'hitResult', this shouldn't happen!");
+    			}
+
+    			for (Hand hand : Hand.values())
+    			{
+    				Object inputEvent;
+    				inputEvent = Reflector.call(Reflector.ForgeHooksClient_OnClickInput, 1, this.gameSettings.keyBindUseItem, hand);
+
+    				if (inputEvent !=null && Reflector.callBoolean(inputEvent,  Reflector.Event_isCanceled)) {
+    					if (Reflector.callBoolean(inputEvent, Reflector.ClickInputEvent_shouldSwingHand)) 
+    						this.player.swingArm(hand);
+    					return;
+    				}
+
+    				ItemStack itemstack = this.player.getHeldItem(hand);
+
+    				if (this.objectMouseOver != null)
+    				{
+    					switch (this.objectMouseOver.getType())
+    					{
+    					case ENTITY:
+    						EntityRayTraceResult entityraytraceresult = (EntityRayTraceResult)this.objectMouseOver;
+    						Entity entity = entityraytraceresult.getEntity();
+    						ActionResultType actionresulttype = this.playerController.interactWithEntity(this.player, entity, entityraytraceresult, hand);
+
+    						if (!actionresulttype.isSuccessOrConsume())
+    						{
+    							actionresulttype = this.playerController.interactWithEntity(this.player, entity, hand);
+    						}
+
+    						if (actionresulttype.isSuccessOrConsume())
+    						{
+    							if (actionresulttype.isSuccess())
+    							{
+    								if (inputEvent == null || Reflector.callBoolean(inputEvent, Reflector.ClickInputEvent_shouldSwingHand))
+
+    									this.player.swingArm(hand);
+    							}
+
+    							return;
+    						}
+
+    						break;
+
+    					case BLOCK:
+    						BlockRayTraceResult blockraytraceresult = (BlockRayTraceResult)this.objectMouseOver;
+    						int i = itemstack.getCount();
+    						ActionResultType actionresulttype1 = this.playerController.func_217292_a(this.player, this.world, hand, blockraytraceresult);
+
+    						if (actionresulttype1.isSuccessOrConsume())
+    						{
+    							if (actionresulttype1.isSuccess())
+    							{
+    								if (inputEvent == null || Reflector.callBoolean(inputEvent, Reflector.ClickInputEvent_shouldSwingHand))
+    									this.player.swingArm(hand);
+
+    								if (!itemstack.isEmpty() && (itemstack.getCount() != i || this.playerController.isInCreativeMode()))
+    								{
+    									this.gameRenderer.itemRenderer.resetEquippedProgress(hand);
+    								}
+    							}
+
+    							return;
+    						}
+
+    						if (actionresulttype1 == ActionResultType.FAIL)
+    						{
+    							return;
+    						}
+    					}
+    				}
+
+    				//Forge
+    				if (itemstack.isEmpty() && (this.objectMouseOver == null || this.objectMouseOver.getType() == RayTraceResult.Type.MISS))
+    					Reflector.call(Reflector.ForgeHooks_onEmptyClick, this.player, hand);
+    				//
+
+    				if (!itemstack.isEmpty())
+    				{
+    					ActionResultType actionresulttype2 = this.playerController.processRightClick(this.player, this.world, hand);
+
+    					if (actionresulttype2.isSuccessOrConsume())
+    					{
+    						if (actionresulttype2.isSuccess())
+    						{
+    							this.player.swingArm(hand);
+    						}
+
+    						this.gameRenderer.itemRenderer.resetEquippedProgress(hand);
+    						return;
+    					}
+    				}
+    			}
+    		}
+    	}
     }
 
     public MusicTicker getMusicTicker()
@@ -1552,7 +1673,11 @@
         {
             --this.rightClickDelayTimer;
         }
-
+        
+        //Forge
+        Reflector.call(Reflector.BasicEventHooks_onPreClientTick);
+        //
+        
         this.profiler.startSection("gui");
 
         if (!this.isGamePaused)
@@ -1565,6 +1690,10 @@
         this.tutorial.onMouseHover(this.world, this.objectMouseOver);
         this.profiler.startSection("gameMode");
 
+        //Vivecraft
+        PlayerModelController.getInstance().tick();
+        //
+        
         if (!this.isGamePaused && this.world != null)
         {
             this.playerController.tick();
@@ -1717,6 +1846,9 @@
         this.profiler.endStartSection("keyboard");
         this.keyboardListener.tick();
         this.profiler.endSection();
+        //Forge
+        Reflector.call(Reflector.BasicEventHooks_onPostClientTick);
+        //
     }
 
     private void processKeyBinds()
@@ -1921,6 +2053,14 @@
 
         while (!this.integratedServer.serverIsInRunLoop())
         {
+        	//Forge
+            if ((Reflector.fml_StartupQuery_check.exists() && !Reflector.callBoolean(Reflector.fml_StartupQuery_check)) || this.integratedServer.isServerStopped()) {
+                this.displayGuiScreen(null);
+                return;
+             } else if (this.currentScreen == null) // if we're showing nothing, put the working screen back again
+               this.displayGuiScreen(worldloadprogressscreen);
+            //
+            
             worldloadprogressscreen.tick();
             this.runGameLoop(false);
 
@@ -1946,12 +2086,23 @@
         {
         }));
         networkmanager.sendPacket(new CHandshakePacket(socketaddress.toString(), 0, ProtocolType.LOGIN));
-        networkmanager.sendPacket(new CLoginStartPacket(this.getSession().getProfile()));
+        //Forge
+        com.mojang.authlib.GameProfile gameProfile = this.getSession().getProfile();
+        if((Reflector.ForgeSession_hasCachedProperties.exists() && !Reflector.callBoolean(this.getSession(),Reflector.ForgeSession_hasCachedProperties))) {
+           gameProfile = sessionService.fillProfileProperties(gameProfile, true); //Forge: Fill profile properties upon game load. Fixes MC-52974.
+           Reflector.call(this.getSession(), Reflector.ForgeSession_setProperties, gameProfile.getProperties());
+        }
+        //
+        networkmanager.sendPacket(new CLoginStartPacket(gameProfile));
         this.networkManager = networkmanager;
     }
 
     public void loadWorld(ClientWorld worldClientIn)
     {
+    	//Forge
+        if (world != null) 
+        	Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.WorldEvent_Unload_Constructor, world));
+        //
         WorkingScreen workingscreen = new WorkingScreen();
         workingscreen.displaySavingString(new TranslationTextComponent("connect.joining"));
         this.updateScreenTick(workingscreen);
@@ -1988,12 +2139,18 @@
         IntegratedServer integratedserver = this.integratedServer;
         this.integratedServer = null;
         this.gameRenderer.resetData();
+        //Forge
+        Reflector.call(Reflector.ClientHooks_firePlayerLogout, this.playerController, this.player);
+        //
         this.playerController = null;
         NarratorChatListener.INSTANCE.clear();
         this.updateScreenTick(screenIn);
 
         if (this.world != null)
         {
+        	//forge
+        	Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.WorldEvent_Unload_Constructor, world));
+            //
             if (integratedserver != null)
             {
                 while (!integratedserver.isThreadAlive())
@@ -2006,6 +2163,9 @@
             this.ingameGUI.resetPlayersOverlayFooterHeader();
             this.currentServerData = null;
             this.integratedServerIsRunning = false;
+            //forge
+            Reflector.call(Reflector.ClientHooks_handleClientWorldClosing, world);
+            //
             this.game.leaveGameSession();
         }
 
@@ -2030,6 +2190,9 @@
         this.particles.clearEffects(worldIn);
         TileEntityRendererDispatcher.instance.setWorld(worldIn);
         this.func_230150_b_();
+        //Forge
+        Reflector.call(Reflector.MinecraftForgeClient_clearRenderCache);
+        //
     }
 
     public final boolean isDemo()
@@ -2062,6 +2225,16 @@
     {
         if (this.objectMouseOver != null && this.objectMouseOver.getType() != RayTraceResult.Type.MISS)
         {
+        	
+			Object inputEvent;
+			inputEvent = Reflector.call(Reflector.ForgeHooksClient_OnClickInput, 2, this.gameSettings.keyBindPickBlock, Hand.MAIN_HAND);
+       	
+        	//Forge
+            if (inputEvent != null && !Reflector.callBoolean(inputEvent, Reflector.Event_isCanceled))
+            	Reflector.call(Reflector.ForgeHooks_onPickBlock, this.objectMouseOver, this.player, this.world);
+            if(inputEvent != null) return;
+            //
+            
             boolean flag = this.player.abilities.isCreativeMode;
             TileEntity tileentity = null;
             RayTraceResult.Type raytraceresult$type = this.objectMouseOver.getType();
@@ -2488,6 +2661,10 @@
 
     public MusicTicker.MusicType getAmbientMusicType()
     {
+    	//Forge
+        MusicTicker.MusicType type = this.world == null || this.world.dimension == null ? null : (MusicTicker.MusicType)Reflector.call(this.world.dimension, Reflector.Dimension_getMusicType);
+        if (type != null) return type;
+        //
         if (this.currentScreen instanceof WinGameScreen)
         {
             return MusicTicker.MusicType.CREDITS;
@@ -2704,20 +2881,24 @@
 
     private static ClientResourcePackInfo makePackInfo(String name, boolean isAlwaysEnabled, Supplier<IResourcePack> p_228011_2_, IResourcePack p_228011_3_, PackMetadataSection p_228011_4_, ResourcePackInfo.Priority priority)
     {
-        int i = p_228011_4_.getPackFormat();
-        Supplier<IResourcePack> supplier = p_228011_2_;
+    	int i = p_228011_4_.getPackFormat();
+    	Supplier<IResourcePack> supplier = p_228011_2_;
 
-        if (i <= 3)
-        {
-            supplier = wrapV3(p_228011_2_);
-        }
-
-        if (i <= 4)
-        {
-            supplier = wrapV4(supplier);
-        }
-
-        return new ClientResourcePackInfo(name, isAlwaysEnabled, supplier, p_228011_3_, p_228011_4_, priority);
+    	if (i <= 3)
+    	{
+    		supplier = wrapV3(p_228011_2_);
+    	}
+
+    	if (i <= 4)
+    	{
+    		supplier = wrapV4(supplier);
+    	}
+    	//Forge
+    	if(Reflector.IForgeIResourcePack_isHidden.exists())
+    		return (ClientResourcePackInfo) Reflector.newInstance(Reflector.ClientResourcePackInfo_Constructor, name, isAlwaysEnabled, supplier, p_228011_3_, p_228011_4_, priority, Reflector.callBoolean(p_228011_3_,Reflector.IForgeIResourcePack_isHidden));   				
+    	else 
+    		return new ClientResourcePackInfo(name, isAlwaysEnabled, supplier, p_228011_3_, p_228011_4_, priority);
+    	//
     }
 
     private static Supplier<IResourcePack> wrapV3(Supplier<IResourcePack> p_228021_0_)
@@ -2740,4 +2921,18 @@
     {
         this.modelManager.setMaxMipmapLevel(p_228020_1_);
     }
+    
+    //Forge additions
+    public ItemColors getItemColors() {
+        return this.itemColors;
+     }
+
+     public SearchTreeManager getSearchTreeManager() {
+        return this.searchTreeManager;
+     }
+     
+    //Vivecraft Additions
+
+    public final String minecriftVerString = "Vivecraft 1.15.2 jrbudda-NONVR-3-b9";
+
 }
