--- a/net/minecraft/client/entity/player/ClientPlayerEntity.java
+++ b/net/minecraft/client/entity/player/ClientPlayerEntity.java
@@ -1,11 +1,33 @@
 package net.minecraft.client.entity.player;
 
 import com.google.common.collect.Lists;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
+
+import net.minecraft.network.play.client.*;
+import org.apache.commons.lang3.tuple.Pair;
+import org.apache.logging.log4j.LogManager;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.NetworkHelper.PacketDiscriminators;
+import org.vivecraft.gameplay.OpenVRPlayer;
+import org.vivecraft.physicalinventory.TransactionMutex;
+import org.vivecraft.provider.MCOpenVR;
+import org.vivecraft.render.VRFirstPersonArmSwing;
+import org.vivecraft.settings.VRSettings;
+import org.vivecraft.utils.external.jinfinadeck;
+import org.vivecraft.utils.external.jkatvr;
+
+import net.minecraft.block.Block;
 import net.minecraft.block.BlockState;
+import net.minecraft.block.Blocks;
+import net.minecraft.block.SoundType;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.audio.BubbleColumnAmbientSoundHandler;
 import net.minecraft.client.audio.ElytraSound;
@@ -22,6 +44,7 @@
 import net.minecraft.client.gui.screen.JigsawScreen;
 import net.minecraft.client.gui.screen.Screen;
 import net.minecraft.client.gui.screen.inventory.ContainerScreen;
+import net.minecraft.client.main.Main;
 import net.minecraft.client.network.play.ClientPlayNetHandler;
 import net.minecraft.client.util.ClientRecipeBook;
 import net.minecraft.client.world.ClientWorld;
@@ -31,24 +54,18 @@
 import net.minecraft.entity.Pose;
 import net.minecraft.entity.item.BoatEntity;
 import net.minecraft.entity.item.minecart.AbstractMinecartEntity;
+import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.inventory.EquipmentSlotType;
+import net.minecraft.inventory.container.ClickType;
 import net.minecraft.item.ElytraItem;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.Items;
+import net.minecraft.item.UseAction;
 import net.minecraft.item.crafting.IRecipe;
 import net.minecraft.network.datasync.DataParameter;
-import net.minecraft.network.play.client.CAnimateHandPacket;
-import net.minecraft.network.play.client.CChatMessagePacket;
-import net.minecraft.network.play.client.CClientStatusPacket;
-import net.minecraft.network.play.client.CCloseWindowPacket;
-import net.minecraft.network.play.client.CEntityActionPacket;
-import net.minecraft.network.play.client.CInputPacket;
-import net.minecraft.network.play.client.CMoveVehiclePacket;
-import net.minecraft.network.play.client.CPlayerAbilitiesPacket;
-import net.minecraft.network.play.client.CPlayerDiggingPacket;
-import net.minecraft.network.play.client.CPlayerPacket;
-import net.minecraft.network.play.client.CRecipeInfoPacket;
+import net.minecraft.particles.ItemParticleData;
+import net.minecraft.particles.ParticleType;
 import net.minecraft.particles.ParticleTypes;
 import net.minecraft.potion.Effect;
 import net.minecraft.potion.EffectInstance;
@@ -70,12 +87,15 @@
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.math.RayTraceResult;
 import net.minecraft.util.math.Vec2f;
 import net.minecraft.util.math.Vec3d;
 import net.minecraft.util.math.shapes.ISelectionContext;
 import net.minecraft.util.math.shapes.VoxelShape;
 import net.minecraft.util.text.ITextComponent;
+import net.minecraft.world.World;
 import net.minecraft.world.dimension.DimensionType;
+import net.optifine.reflect.Reflector;
 
 public class ClientPlayerEntity extends AbstractClientPlayerEntity
 {
@@ -98,6 +118,23 @@
     public MovementInput movementInput;
     protected final Minecraft mc;
     protected int sprintToggleTimer;
+
+    
+    // VIVE START - teleport movement
+    public int movementTeleportTimer;
+	public boolean initFromServer;
+	public boolean teleported;
+    // VIVE END - teleport movement
+    /** MINECRIFT **/
+    public float headPitch = 0;
+    public double additionX = 0;
+    public double additionZ = 0;
+    public double additionY = 0;
+    public final float PIOVER180 = (float)Math.PI / 180.0F;
+    /** END MINECRIFT **/
+    
+    
+    /** Ticks left before sprinting is disabled. */
     public int sprintingTicksLeft;
     public float renderArmYaw;
     public float renderArmPitch;
@@ -127,6 +164,86 @@
         this.ambientSoundHandlers.add(new UnderwaterAmbientSoundHandler(this, p_i745_1_.getSoundHandler()));
         this.ambientSoundHandlers.add(new BubbleColumnAmbientSoundHandler(this));
     }
+    //VIVE
+    public void setItemInUseClient(ItemStack item, Hand hand){
+    	this.activeItemStack = item;
+    	if (item != ItemStack.EMPTY) {
+	    	this.handActive = true;
+	    	this.activeHand = hand;
+    	} else {
+    	  	this.handActive = false;
+	    	this.activeHand = hand;
+    	}
+    }
+    
+    public void setItemInUseCountClient(int count){
+    	this.activeItemStackUseCount = count;
+    }
+	
+	HashMap<Pair<Short, Integer>, TransactionMutex> pendingTransactions = new HashMap<>();
+	
+	public boolean windowClickSynced(int windowId, int slotId, int mouseButton, ClickType type, long timeout) {
+		short transactionID = this.openContainer.getNextTransactionID(this.inventory);
+		ItemStack itemstack = this.openContainer.slotClick(slotId, mouseButton, type, this);
+		
+		
+		TransactionMutex mutex = new TransactionMutex();
+		
+		Thread watchdog = new Thread(mc.backgroundThreadGroup,new Runnable() {
+			@Override
+			public void run() {
+				try {
+					Thread.sleep(timeout);
+					
+					synchronized (mutex) {
+						if (mutex.consumed)
+							return;
+						
+						mutex.approved = false;
+						mutex.consumed = true;
+						pendingTransactions.remove(Pair.of(transactionID, windowId));
+						mutex.notifyAll();
+						LogManager.getLogger().warn("Timeout on window operation "+transactionID);
+					}
+				} catch (InterruptedException e) {}
+			}
+		});
+		mutex.watchdog = watchdog;
+		
+		
+		pendingTransactions.put(Pair.of(transactionID, windowId), mutex);
+		try {
+			synchronized (mutex) {
+				this.connection.sendPacket(new CClickWindowPacket(windowId, slotId, mouseButton, type, itemstack, transactionID));
+				watchdog.start();
+				mutex.wait();
+				return mutex.approved;
+			}
+		} catch (InterruptedException e) {
+			e.printStackTrace();
+			return false;
+		}
+	}
+	
+	
+	public void confirmTransaction(short transactionID, int windowId, boolean approved) {
+		TransactionMutex mutex = pendingTransactions.get(Pair.of(transactionID, windowId));
+		if (mutex != null) {
+			synchronized (mutex) {
+				if (mutex.consumed)
+					return; //Avoid race condition with watchdog
+				
+				mutex.watchdog.interrupt();
+				pendingTransactions.remove(Pair.of(transactionID, windowId));
+				mutex.approved = approved;
+				mutex.consumed = true;
+				mutex.notifyAll();
+				
+			}
+		}
+	}
+	
+	//END VIVECRAFT
 
     public boolean isGlowing()
     {
@@ -135,6 +252,21 @@
 
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
+    	//VIVECRAFT
+    	if(amount > 0 && !isCreative()){
+    		int dur = 1000;
+    		if(source.isExplosion())dur = 2000;
+    		if(source == DamageSource.CACTUS) dur = 200;
+    		//Vivecraft trigger haptics
+    		MCOpenVR.triggerHapticPulse(0, dur);
+    		MCOpenVR.triggerHapticPulse(1, dur);    	
+    	}
+    	//END VIVECRAFT
+
+    	//Forge
+    	//if(Reflector.forgeExists())
+    	//	Reflector.call(Reflector.ForgeHooks_onLivingAttack, new Object[]{this, source, amount});
+    	//
         return false;
     }
 
@@ -142,6 +274,8 @@
     {
     }
 
+    private boolean snapReq = false;
+    
     public boolean startRiding(Entity entityIn, boolean force)
     {
         if (!super.startRiding(entityIn, force))
@@ -161,7 +295,10 @@
                 this.rotationYaw = entityIn.rotationYaw;
                 this.setRotationYawHead(entityIn.rotationYaw);
             }
-
+            //Vivecraft
+            this.mc.vehicleTracker.onStartRiding(entityIn, this);
+    		snapReq = true;
+    		//
             return true;
         }
     }
@@ -170,6 +307,10 @@
     {
         super.stopRiding();
         this.rowingBoat = false;
+        //Vivecraft
+        this.mc.vehicleTracker.onStopRiding(this);
+		//
+
     }
 
     public float getPitch(float partialTicks)
@@ -280,6 +421,13 @@
             }
 
             this.prevOnGround = this.onGround;
+            
+            //VIVECRAFT
+            mc.swingTracker.IAmLookingAtMyHand[0] = mc.swingTracker.shouldIlookatMyHand[0];
+            mc.swingTracker.IAmLookingAtMyHand[1] = mc.swingTracker.shouldIlookatMyHand[1];
+            if(mc.vrSettings.walkUpBlocks) mc.gameSettings.autoJump = false;
+            //END VIVECRAFT
+            
             this.autoJumpEnabled = this.mc.gameSettings.autoJump;
         }
     }
@@ -294,10 +442,31 @@
     public void sendChatMessage(String message)
     {
         this.connection.sendPacket(new CChatMessagePacket(message));
+        lastMsg = message;
     }
 
+    public String lastMsg = null;
+   
+    //Vivecraft
+    public void swingArm(Hand hand, VRFirstPersonArmSwing animation) {
+    	mc.getFirstPersonRenderer().swingType = animation;
+    	this.swingArm(hand);
+    }
+    ///
+    
     public void swingArm(Hand hand)
     {
+    	//Vivecraft
+    	if(!this.isSwingInProgress) {
+            if (mc.objectMouseOver != null && mc.objectMouseOver.getType() != RayTraceResult.Type.MISS ) {
+        		mc.getFirstPersonRenderer().xdist = (float) mc.objectMouseOver.getHitVec().subtract(
+            			mc.vrPlayer.vrdata_world_pre.getController(hand.ordinal()).getPosition()).length();    
+            } else {
+            	mc.getFirstPersonRenderer().xdist = 0;
+            }
+    	}
+    	//
+    	
         super.swingArm(hand);
         this.connection.sendPacket(new CAnimateHandPacket(hand));
     }
@@ -551,7 +720,24 @@
 
     public void playSound(SoundEvent soundIn, float volume, float pitch)
     {
-        this.world.playSound(this.getPosX(), this.getPosY(), this.getPosZ(), soundIn, this.getSoundCategory(), volume, pitch, false);
+        SoundCategory category = this.getSoundCategory();
+        //Forge
+        if (Reflector.ForgeEventFactory_onPlaySoundAtEntity.exists())
+        {
+            Object object = Reflector.ForgeEventFactory_onPlaySoundAtEntity.call(this, soundIn, this.getSoundCategory(), volume, pitch);
+
+            if (Reflector.callBoolean(object, Reflector.Event_isCanceled) || Reflector.call(object, Reflector.PlaySoundAtEntityEvent_getSound) == null)
+            {
+                return;
+            }
+
+            soundIn = (SoundEvent)Reflector.call(object, Reflector.PlaySoundAtEntityEvent_getSound);
+            category = (SoundCategory)Reflector.call(object, Reflector.PlaySoundAtEntityEvent_getCategory);
+            volume = Reflector.callFloat(object, Reflector.PlaySoundAtEntityEvent_getVolume);
+        }
+        //
+        this.world.playSound(this.getPosX(), this.getPosY(), this.getPosZ(), soundIn, category, volume, pitch, false);
+
     }
 
     public void playSound(SoundEvent p_213823_1_, SoundCategory p_213823_2_, float p_213823_3_, float p_213823_4_)
@@ -730,6 +916,9 @@
         boolean flag1 = this.movementInput.field_228350_h_;
         boolean flag2 = this.func_223110_ee();
         this.movementInput.func_225607_a_(this.func_228354_I_());
+        //Forge
+        Reflector.call(Reflector.ForgeHooksClient_onInputUpdate, this, this.movementInput);
+        //
         this.mc.getTutorial().handleMovement(this.movementInput);
 
         if (this.isHandActive() && !this.isPassenger())
@@ -748,12 +937,17 @@
             this.movementInput.jump = true;
         }
 
-        if (!this.noClip)
-        {
-            this.pushOutOfBlocks(this.getPosX() - (double)this.getWidth() * 0.35D, this.getPosY() + 0.5D, this.getPosZ() + (double)this.getWidth() * 0.35D);
-            this.pushOutOfBlocks(this.getPosX() - (double)this.getWidth() * 0.35D, this.getPosY() + 0.5D, this.getPosZ() - (double)this.getWidth() * 0.35D);
-            this.pushOutOfBlocks(this.getPosX() + (double)this.getWidth() * 0.35D, this.getPosY() + 0.5D, this.getPosZ() - (double)this.getWidth() * 0.35D);
-            this.pushOutOfBlocks(this.getPosX() + (double)this.getWidth() * 0.35D, this.getPosY() + 0.5D, this.getPosZ() + (double)this.getWidth() * 0.35D);
+        //Forge
+        Object event = Reflector.newInstance(Reflector.PlayerSPPushOutOfBlocksEvent_Constructor, this); 
+        // 
+        if (!this.noClip && !Reflector.postForgeBusEvent(event)) {
+        	double y= this.getPosY() + 0.5f;
+        	if(event!=null)
+        		y = Reflector.callDouble(event, Reflector.PlayerSPPushOutOfBlocksEvent_getMinY);
+	        this.pushOutOfBlocks(this.getPosX() - (double)this.getWidth() * 0.35D, y, this.getPosZ() + (double)this.getWidth() * 0.35D);
+	        this.pushOutOfBlocks(this.getPosX() - (double)this.getWidth() * 0.35D, y, this.getPosZ() - (double)this.getWidth() * 0.35D);
+	        this.pushOutOfBlocks(this.getPosX() + (double)this.getWidth() * 0.35D, y, this.getPosZ() - (double)this.getWidth() * 0.35D);
+	        this.pushOutOfBlocks(this.getPosX() + (double)this.getWidth() * 0.35D, y, this.getPosZ() + (double)this.getWidth() * 0.35D);
         }
 
         boolean flag4 = (float)this.getFoodStats().getFoodLevel() > 6.0F || this.abilities.allowFlying;
@@ -915,6 +1109,9 @@
         }
 
         super.livingTick();
+        // VIVE START - teleport movement
+        mc.vrPlayer.tick(this, this.mc, this.rand);
+        // VIVE END - teleport movement
 
         if (this.onGround && this.abilities.isFlying && !this.mc.playerController.isSpectatorMode())
         {
@@ -1008,12 +1205,66 @@
         return super.removeActivePotionEffect(potioneffectin);
     }
 
+    private Vec3d  moveMulIn;
+    
     public void move(MoverType typeIn, Vec3d pos)
     {
-        double d0 = this.getPosX();
-        double d1 = this.getPosZ();
-        super.move(typeIn, pos);
-        this.updateAutoJump((float)(this.getPosX() - d0), (float)(this.getPosZ() - d1));
+    	moveMulIn = this.motionMultiplier; 	 //motionMultiplier gets zeroed in the super call.
+    	if(pos.length() == 0) return;
+    	if(this.isPassenger())return;
+    	boolean freemove = OpenVRPlayer.get().getFreeMove();
+    	boolean doY = freemove || (Minecraft.getInstance().vrSettings.simulateFalling && !this.isOnLadder()) && !this.isShiftKeyDown();
+    	if(mc.climbTracker.isActive(this) && (freemove || mc.climbTracker.isGrabbingLadder())) doY = true;
+    	Vec3d roomOrigin = OpenVRPlayer.get().roomOrigin;
+    	//   	Vec3 camloc = Minecraft.getInstance().vrPlayer.getHMDPos_World();
+
+    	if ( (mc.climbTracker.isGrabbingLadder() || freemove || mc.swimTracker.isActive(this)) && 
+    			(this.moveForward != 0 || this.isElytraFlying() || Math.abs(this.getMotion().x) > 0.01 || Math.abs(this.getMotion().z) > 0.01))
+    	{
+    		double ox = roomOrigin.x - getPosX();
+    		double oz = roomOrigin.z - getPosZ();
+    		double d0 = this.getPosX();
+    		double d1 = this.getPosZ();
+    		super.move(typeIn, pos);
+    		if(mc.vrSettings.walkUpBlocks)
+    			this.stepHeight = this.getMuhJumpFactor() == 1 ? 1 : 0.6f;
+    		else {
+    			this.stepHeight = 0.6f;
+    			this.updateAutoJump((float)(this.getPosX() - d0), (float)(this.getPosZ() - d1));
+    		}
+    		double oy = this.getPosY() + this.getRoomYOffsetFromPos();
+    		OpenVRPlayer.get().setRoomOrigin(
+    				getPosX() + ox, 
+    				oy, 
+    				getPosZ()  + oz, false);
+    	} else {
+    		if(doY) {      	 
+    			super.move(typeIn,new Vec3d(0,pos.y,0));
+    			OpenVRPlayer.get().setRoomOrigin(
+    					OpenVRPlayer.get().roomOrigin.x, 
+    					this.getPosY() + this.getRoomYOffsetFromPos(),
+    					OpenVRPlayer.get().roomOrigin.z, false);
+    		} else {
+    			this.onGround = true; //
+    			//do not move player, VRPlayer.moveplayerinroom will move him around.
+    		}
+    	}   		
+    }
+    
+    public double getRoomYOffsetFromPos() {
+		double oy = 0;
+        //Adjust room origin to account for pose.
+        if(this.getPose() == Pose.FALL_FLYING || 
+            this.getPose() == Pose.SPIN_ATTACK ||
+            this.getPose() == Pose.SWIMMING)
+            oy = 1.62 - 0.4;
+        else if (this.getPose() == Pose.CROUCHING &&
+            !mc.vrSettings.realisticSneakEnabled)
+        {
+            oy = 1.62 - 1.27;
+        }
+        
+		return -oy;
     }
 
     public boolean isAutoJumpEnabled()
@@ -1031,13 +1282,17 @@
             float f = this.getAIMoveSpeed();
             float f1 = (float)vec3d2.lengthSquared();
 
+            //VIVE
+            float yaw = Minecraft.getInstance().vrPlayer.vrdata_world_pre.getBodyYaw();
+               
             if (f1 <= 0.001F)
             {
                 Vec2f vec2f = this.movementInput.getMoveVector();
                 float f2 = f * vec2f.x;
                 float f3 = f * vec2f.y;
-                float f4 = MathHelper.sin(this.rotationYaw * ((float)Math.PI / 180F));
-                float f5 = MathHelper.cos(this.rotationYaw * ((float)Math.PI / 180F));
+                        float f4 = MathHelper.sin(yaw * 0.017453292F);
+                        float f5 = MathHelper.cos(yaw * 0.017453292F);
+                        //END VIVE
                 vec3d2 = new Vec3d((double)(f2 * f5 - f3 * f4), vec3d2.y, (double)(f3 * f5 + f2 * f4));
                 f1 = (float)vec3d2.lengthSquared();
 
@@ -1220,4 +1475,406 @@
             return this.eyesInWaterPlayer;
         }
     }
+// VIVECREAFT ADDITIONS
+    
+    
+    /**
+     * Sets the location and Yaw/Pitch of an entity in the world
+     */
+    @Override
+    public void setLocationAndAngles(double x, double y, double z, float yaw, float pitch)
+   {
+    	super.setLocationAndAngles(x, y, z, yaw, pitch);
+
+    	//Vivecraft - this is for when the server moves the player entity, such as spawning, dimension change
+    	//or dismount.
+    	if(!initFromServer) 
+    		return;
+    	
+    	mc.vrPlayer.snapRoomOriginToPlayerEntity(this, false, false);
+    	//mc.vrSettings.vrWorldRotation = yaw; this was a terrible idea
+    }
+    
+    @Override
+    public void setPositionAndRotation(double x, double y, double z, float yaw, float pitch)
+    {
+        super.setPositionAndRotation(x, y, z, yaw, pitch);
+		
+    	mc.vrPlayer.snapRoomOriginToPlayerEntity(this, false, false);
+    	//mc.vrSettings.vrWorldRotation = yaw;
+
+		if(initFromServer == false){
+			this.setLocationAndAngles(x, y, z, yaw, pitch);
+            initFromServer = true;    
+        }
+    }
+    
+    // VIVE START - update room origin when player entity is moved
+    @Override
+    public void setPosition(double x, double y, double z)
+    { //this is also called when riding to move this around.
+		
+    	double bx = this.getPosX();
+    	double by = this.getPosY();
+    	double bz = this.getPosZ();
+
+    	super.setPosition(x, y, z);
+
+    	double ax = this.getPosX();
+    	double ay = this.getPosY();
+    	double az = this.getPosZ();   	
+
+    		Entity mount = this.getRidingEntity();
+    				
+            if (isPassenger()){          	
+    			Vec3d offset = mc.vehicleTracker.Premount_Pos_Room;
+    			offset = offset.rotateYaw(mc.vrPlayer.vrdata_world_pre.rotation_radians);    			
+    			Entity e= mount;
+    			x = x - offset.x;
+    			y = mc.vehicleTracker.getVehicleFloor(mount, y);
+    			z = z - offset.z;
+    			mc.vrPlayer.setRoomOrigin(x, y, z, false);   		
+            } else {
+        		Vec3d roomOrigin = Minecraft.getInstance().vrPlayer.roomOrigin;
+          		OpenVRPlayer.get().setRoomOrigin(
+          				roomOrigin.x + (ax - bx),
+          				roomOrigin.y + (ay - by),
+          				roomOrigin.z + (az - bz),
+          				false
+          				);
+            }
+            
+   // 	} 
+    }
+        
+    
+    /** MINECRIFT **/
+    public void doDrag()
+    {
+
+    	float var3 = 0.91F;
+
+    	if (this.onGround)
+    	{
+    		var3 = this.world.getBlockState(new BlockPos(this.getPosX(), this.getBoundingBox().minY - 1.0D, this.getPosZ())).getBlock().getSlipperiness() * 0.91F;
+    	}
+
+    	double xFactor = var3;
+    	double zFactor = var3;
+
+    	//VIVECRAFT account for stock drag code we can't change in EntityLivingBase
+    	this.setMotion(this.getMotion().x / xFactor, this.getMotion().y, this.getMotion().z / zFactor);
+    	//
+
+//    	if(!mc.vrSettings.seated && !this.onGround && !this.isElytraFlying() && !this.hasNoGravity() && mc.jumpTracker.isClimbeyJumpEquipped() && mc.vrSettings.realisticJumpEnabled) return; //no drag for jump boots.
+//    	if(mc.climbTracker.isGrabbingLadder()) return; //no drag for climb.
+	
+    	int inertiaFactor = Minecraft.getInstance().vrSettings.inertiaFactor;
+    	double addFactor = VRSettings.getInertiaAddFactor(inertiaFactor);
+
+    	double boundedAdditionX = getBoundedAddition(additionX);
+    	double targetLimitX = (var3 * boundedAdditionX) / (1f - var3);
+    	double multiFactorX = targetLimitX / (var3 * (targetLimitX + (boundedAdditionX * addFactor)));
+    	xFactor *= multiFactorX;
+
+    	double boundedAdditionZ = getBoundedAddition(additionZ);
+    	double targetLimitZ = (var3 * boundedAdditionZ) / (1f - var3);
+    	double multiFactorZ = targetLimitZ / (var3 * (targetLimitZ + (boundedAdditionZ * addFactor)));
+    	zFactor *= multiFactorZ;
+    	
+    	this.setMotion(this.getMotion().x * xFactor, this.getMotion().y, this.getMotion().z * zFactor);
+    }
+    
+    public double getBoundedAddition(double orig)
+    {
+        if (orig >= -1.0E-6D && orig <= 1.0E-6D) {
+            return 1.0E-6D;
+        }
+        else {
+            return orig;
+        }
+    }
+           
+    @Override
+    public void moveRelative(float friction, Vec3d move) 
+    {
+    	//   	super.moveFlying(strafe, forward, friction);
+
+    	double up = move.y;
+    	double strafe = move.x;
+    	double forward = move.z;
+
+    	OpenVRPlayer vr = mc.vrPlayer;		
+    	if (!vr.getFreeMove()) {return;}
+
+    	int inertiaFactor = Minecraft.getInstance().vrSettings.inertiaFactor;
+    	double speed = strafe * strafe + forward * forward;
+
+    	double mX = 0d;
+    	double mZ = 0d;
+    	double mY = 0d;
+    	double addFactor = 1f;
+
+    	if (speed >= 1.0E-4F || Main.katvr)
+    	{
+    		speed = MathHelper.sqrt(speed);
+
+    		if (speed < 1.0F && !Main.katvr)
+    		{
+    			speed = 1.0F;
+    		}
+
+    		speed = friction / speed;
+    		strafe *= speed;
+    		forward *= speed;
+    		Vec3d directionVec = new Vec3d(strafe, 0,forward);
+    		OpenVRPlayer con = mc.vrPlayer;
+
+    		if(Main.katvr){
+    			jkatvr.query();
+
+    			speed =  jkatvr.getSpeed() * jkatvr.walkDirection() * mc.vrSettings.movementSpeedMultiplier;
+    			directionVec = new Vec3d(0, 0,speed);
+    			directionVec=directionVec.rotateYaw(-jkatvr.getYaw()* PIOVER180 + mc.vrPlayer.vrdata_world_pre.rotation_radians);	    		
+
+    			if(this.abilities.isFlying || this.inWater){
+    				directionVec=directionVec.rotatePitch(con.vrdata_world_pre.hmd.getPitch()* PIOVER180);				
+    			}else{
+
+    			}
+    		}     		
+    		else if(Main.infinadeck){
+    			jinfinadeck.query();
+
+    			speed =  jinfinadeck.getSpeed() * jinfinadeck.walkDirection() * mc.vrSettings.movementSpeedMultiplier;
+    			directionVec = new Vec3d(0, 0,speed);
+    			directionVec=directionVec.rotateYaw(-jinfinadeck.getYaw()* PIOVER180 + mc.vrPlayer.vrdata_world_pre.rotation_radians);	    		
+
+    			if(this.abilities.isFlying || this.inWater){
+    				directionVec=directionVec.rotatePitch(con.vrdata_world_pre.hmd.getPitch()* PIOVER180);				
+    			}else{
+
+    			}
+    		}else if(mc.vrSettings.seated){
+    			int c = 0;
+    			if(mc.vrSettings.seatedUseHMD) c = 1;
+    			directionVec=directionVec.rotateYaw(-con.vrdata_world_pre.getController(c).getYaw() * PIOVER180);	    		
+    		}else{
+    			if(this.abilities.isFlying || this.inWater){
+    				switch (mc.vrSettings.vrFreeMoveMode){
+    				case VRSettings.FREEMOVE_CONTROLLER:
+    					directionVec = directionVec.rotatePitch(con.vrdata_world_pre.getController(1).getPitch()  * PIOVER180);		   
+    					break;
+    				case VRSettings.FREEMOVE_HMD:
+    					directionVec = directionVec.rotatePitch(con.vrdata_world_pre.hmd.getPitch() * PIOVER180);				
+    					break;
+    				case VRSettings.FREEMOVE_RUNINPLACE:
+    					//hmd pitch
+    					directionVec = directionVec.rotatePitch(con.vrdata_world_pre.hmd.getPitch()* PIOVER180);	
+    					break;
+    				}
+    			}
+
+    			if(mc.jumpTracker.isjumping()){
+    				directionVec=directionVec.rotateYaw(-con.vrdata_world_pre.hmd.getYaw() * PIOVER180);		
+    			}else{
+    				switch (mc.vrSettings.vrFreeMoveMode){
+    				case VRSettings.FREEMOVE_CONTROLLER:
+    					directionVec = directionVec.rotateYaw(-con.vrdata_world_pre.getController(1).getYaw() * PIOVER180);	
+    					break;
+    				case VRSettings.FREEMOVE_HMD:
+    					directionVec = directionVec.rotateYaw(-con.vrdata_world_pre.hmd.getYaw() * PIOVER180);	
+    					break;
+    				case VRSettings.FREEMOVE_RUNINPLACE:
+    					directionVec = directionVec.rotateYaw((float) (-mc.runTracker.getYaw() * PIOVER180));
+    					directionVec = directionVec.scale(mc.runTracker.getSpeed());
+    					break;
+    				}
+    			}
+    		}
+
+    		mX = directionVec.x;
+    		mY = directionVec.y;
+    		mZ = directionVec.z;
+
+    		// Modify acceleration sequence (each tick)
+    		if(!this.abilities.isFlying && !this.inWater) addFactor = VRSettings.getInertiaAddFactor(inertiaFactor);
+
+    		float yAdd = 1f;
+    		if(this.abilities.isFlying) yAdd = 5f; //HACK
+
+    		this.setMotion(this.getMotion().x + (mX * addFactor) , 
+    				this.getMotion().y + (mY * yAdd) , 
+    				this.getMotion().z + (mZ * addFactor) );
+
+
+    		this.additionX = mX;
+    		this.additionZ = mZ;
+    	} 
+
+    	//if (this instanceof EntityPlayerSP) {
+    	//    System.out.println(String.format("FLYING: %B, forward: %.4f, strafe: %.4f, pitch: %.4f, yaw: %.4f, mx: %.4f, mz: %.4f, my: %.4f", allowYAdjust, forward, strafe, this.headPitch, this.rotationYaw, mX, mZ, mY));
+    	//}
+
+    	if(!this.abilities.isFlying && !this.inWater) doDrag();       //TODO put back intertia while flying.. doesnt work for some reason. 
+
+    	/** END MINECRIFT **/
+
+    }
+
+    private boolean isThePlayer(){
+    	return this == Minecraft.getInstance().player;
+    }
+
+    	//Vivecraft override from LivingEntity because addItemParticles is private
+    	@Override
+        protected void func_226293_b_(ItemStack p_226293_1_, int p_226293_2_)
+        {
+            if (!p_226293_1_.isEmpty() && this.isHandActive())
+            {
+                if (p_226293_1_.getUseAction() == UseAction.DRINK)
+                {
+                    this.playSound(this.getDrinkSound(p_226293_1_), 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
+                }
+
+                if (p_226293_1_.getUseAction() == UseAction.EAT)
+                {
+                    this.addItemParticles(p_226293_1_, p_226293_2_);
+                    this.playSound(this.getEatSound(p_226293_1_), 0.5F + 0.5F * (float)this.rand.nextInt(2), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+                }
+            }
+        }
+
+        private void addItemParticles(ItemStack stack, int count)
+        {
+
+            for (int i = 0; i < count; ++i)
+            {
+                Vec3d vec3d = new Vec3d(((double)this.rand.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+                vec3d = vec3d.rotatePitch(-this.rotationPitch * ((float)Math.PI / 180F));
+                vec3d = vec3d.rotateYaw(-this.rotationYaw * ((float)Math.PI / 180F));
+                double d0 = (double)(-this.rand.nextFloat()) * 0.6D - 0.3D;
+                Vec3d vec3d1 = new Vec3d(((double)this.rand.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
+    			//VIVE
+    			Hand hand = getActiveHand();
+    			if(hand == Hand.MAIN_HAND){
+    				vec3d1 = Minecraft.getInstance().vrPlayer.vrdata_world_pre.getController(0).getPosition();                 	
+    			} else {
+    				vec3d1 = Minecraft.getInstance().vrPlayer.vrdata_world_pre.getController(1).getPosition();                 	
+    			}
+                // vec3d1 = vec3d1.rotatePitch(-this.rotationPitch * ((float)Math.PI / 180F));
+                // vec3d1 = vec3d1.rotateYaw(-this.rotationYaw * ((float)Math.PI / 180F));
+                // vec3d1 = vec3d1.add(this.getPosX(), this.getPosYEye(), this.getPosZ());
+    			//
+                this.world.addParticle(new ItemParticleData(ParticleTypes.ITEM, stack), vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z);
+            }
+        }
+
+    	public boolean isClimbeyJumpEquipped(){
+
+    		if(this.getItemStackFromSlot(EquipmentSlotType.FEET) != null){
+    			if(mc.jumpTracker.isBoots(this.getItemStackFromSlot(EquipmentSlotType.FEET))) 
+    				return true;
+    		}
+
+    		return false;
+
+    	}
+
+    	public boolean isClimbeyClimbEquipped(){
+
+    		if(this.getHeldItemMainhand() != null){
+    			if(mc.climbTracker.isClaws(this.getHeldItemMainhand())) 
+    				return true;
+    		}
+
+    		if(this.getHeldItemOffhand() != null){
+    			if(mc.climbTracker.isClaws(this.getHeldItemOffhand())) 
+    				return true;
+    		}
+
+    		return false;
+    	}
+    	
+        /**
+         * Called when the mob's health reaches 0.
+         */
+        @Override
+        public void onDeath(DamageSource p_70645_1_){
+        	
+        	super.onDeath(p_70645_1_);
+            MCOpenVR.triggerHapticPulse(0, 2000);
+            MCOpenVR.triggerHapticPulse(1, 2000);    	
+        	
+        }
+    	
+        public void stepSound(BlockPos blockforNoise, Vec3d soundPos){
+        	BlockState bs = this.world.getBlockState(blockforNoise);
+        	Block b = bs.getBlock();
+            SoundType soundtype = b.getSoundType(bs);
+
+        	BlockState bsup = this.world.getBlockState(blockforNoise.up());
+            if (bsup.getBlock() == Blocks.SNOW)
+            {
+                soundtype = Blocks.SNOW.getSoundType(bsup);
+            }
+            
+            float volume = soundtype.getVolume();
+            float pitch = soundtype.getPitch();
+            SoundEvent soundIn = soundtype.getStepSound();
+
+            if (!this.isSilent() && !b.getDefaultState().getMaterial().isLiquid())
+            {
+                this.world.playSound((ClientPlayerEntity)null, soundPos.x, soundPos.y, soundPos.z, soundIn, this.getSoundCategory(), volume, pitch);
+            }
+        }
+
+	// FORGE
+    public void updateSyncFields(ClientPlayerEntity old)
+    {
+        this.lastReportedPosX = old.lastReportedPosX;
+        this.lastReportedPosY = old.lastReportedPosY;
+        this.lastReportedPosZ = old.lastReportedPosZ;
+        this.lastReportedYaw = old.lastReportedYaw;
+        this.lastReportedPitch = old.lastReportedPitch;
+        this.prevOnGround = old.prevOnGround;
+        this.field_228351_cj_ = old.field_228351_cj_;
+        this.serverSprintState = old.serverSprintState;
+        this.positionUpdateTicks = old.positionUpdateTicks;
+    }
+    
+    @Override
+    public ItemStack onFoodEaten(World p_213357_1_, ItemStack p_213357_2_) {
+    	if (p_213357_2_.isFood())
+        {
+        	// Just wanna be safe here, I dunno if this is ever called on the client for non-self
+    		if (this == Minecraft.getInstance().player && p_213357_2_.getDisplayName().getString().equals("EAT ME")) {
+    			Minecraft.getInstance().vrPlayer.wfMode = 0.5f;
+    			Minecraft.getInstance().vrPlayer.wfCount = 400;
+    		}
+        }
+        return super.onFoodEaten(p_213357_1_, p_213357_2_);  	
+    }
+    
+    public float getMuhJumpFactor()
+    {
+    	if(moveMulIn.lengthSquared() > 0) {
+    		return (float) (this.getJumpFactor() * moveMulIn.y);
+    	} else
+    		return this.getJumpFactor();
+    }
+    
+    public float getMuhSpeedFactor()
+    {
+    	if(moveMulIn.lengthSquared() > 0) {
+    		return (float) (this.getSpeedFactor() * (moveMulIn.x + moveMulIn.z) / 2);
+    	} else
+    		return this.getSpeedFactor();
+    }
+    
+    @Override
+    public void stopActiveHand() {
+    	NetworkHelper.sendActiveHand((byte) this.getActiveHand().ordinal());
+    	super.stopActiveHand();
+    }
 }
