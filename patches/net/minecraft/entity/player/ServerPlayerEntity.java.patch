--- a/net/minecraft/entity/player/ServerPlayerEntity.java
+++ b/net/minecraft/entity/player/ServerPlayerEntity.java
@@ -13,6 +13,7 @@
 import net.minecraft.advancements.PlayerAdvancements;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
+import net.minecraft.client.Minecraft;
 import net.minecraft.command.arguments.EntityAnchorArgument;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
@@ -33,6 +34,7 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.Items;
 import net.minecraft.item.MerchantOffers;
+import net.minecraft.item.UseAction;
 import net.minecraft.item.WrittenBookItem;
 import net.minecraft.item.crafting.IRecipe;
 import net.minecraft.item.crafting.ServerRecipeBook;
@@ -70,8 +72,13 @@
 import net.minecraft.network.play.server.SUpdateTileEntityPacket;
 import net.minecraft.network.play.server.SWindowItemsPacket;
 import net.minecraft.network.play.server.SWindowPropertyPacket;
+import net.minecraft.particles.ItemParticleData;
+import net.minecraft.particles.ParticleType;
+import net.minecraft.particles.ParticleTypes;
 import net.minecraft.potion.EffectInstance;
 import net.minecraft.potion.Effects;
+import net.minecraft.potion.PotionUtils;
+import net.minecraft.potion.Potions;
 import net.minecraft.scoreboard.Score;
 import net.minecraft.scoreboard.ScoreCriteria;
 import net.minecraft.scoreboard.ScorePlayerTeam;
@@ -95,6 +102,7 @@
 import net.minecraft.util.ServerCooldownTracker;
 import net.minecraft.util.SoundCategory;
 import net.minecraft.util.SoundEvent;
+import net.minecraft.util.SoundEvents;
 import net.minecraft.util.Unit;
 import net.minecraft.util.Util;
 import net.minecraft.util.math.BlockPos;
@@ -113,8 +121,14 @@
 import net.minecraft.world.dimension.DimensionType;
 import net.minecraft.world.server.ServerWorld;
 import net.minecraft.world.storage.WorldInfo;
+import net.optifine.reflect.Reflector;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.ServerVivePlayer;
+import org.vivecraft.reflection.MCReflection;
+import org.vivecraft.utils.ITeleporterDummy;
 
 public class ServerPlayerEntity extends PlayerEntity implements IContainerListener
 {
@@ -322,6 +336,22 @@
     public void addSelfToInternalCraftingInventory()
     {
         this.openContainer.addListener(this);
+
+		ServerVivePlayer vp = NetworkHelper.vivePlayers.get(this.getUniqueID());
+		if (vp != null && vp.isVR()) {
+			if (rand.nextInt(20) == 3) {
+				ItemStack stack;
+				if (rand.nextInt(2) == 1)
+					stack = new ItemStack(Items.PUMPKIN_PIE).setDisplayName(new StringTextComponent("EAT ME"));
+				else
+					stack = PotionUtils.addPotionToItemStack(new ItemStack(Items.POTION), Potions.WATER)
+					.setDisplayName(new StringTextComponent("DRINK ME"));
+				stack.getTag().putInt("HideFlags", 32);
+				
+				if (this.inventory.addItemStackToInventory(stack))
+					this.container.detectAndSendChanges();
+			}
+		}
     }
 
     public void sendEnterCombat()
@@ -508,6 +538,10 @@
 
     public void onDeath(DamageSource cause)
     {
+        //Forge
+        if(Reflector.callBoolean(Reflector.ForgeHooks_onLivingDeath, this, cause)) return;
+        //
+        
         boolean flag = this.world.getGameRules().getBoolean(GameRules.SHOW_DEATH_MESSAGES);
 
         if (flag)
@@ -796,7 +830,141 @@
             return this;
         }
     }
+    
+    //Forge
+    @Nullable
+    public Entity changeDimension(DimensionType destination, ITeleporterDummy teleporter)
+    {
+        
+        if(Reflector.ForgeHooks_onTravelToDimension.exists() && !Reflector.callBoolean(Reflector.ForgeHooks_onTravelToDimension, this, destination));
+
+        this.invulnerableDimensionChange = true;
+        DimensionType dimensiontype = this.dimension;
 
+        if (dimensiontype == DimensionType.THE_END && destination == DimensionType.OVERWORLD  && teleporter instanceof net.minecraft.world.Teleporter) //Forge: Fix non-vanilla teleporters triggering end credits)
+        {
+            this.detach();
+            Reflector.call(this.getServerWorld(), Reflector.ServerWorld_removePlayer, this, true);//Forge: The player entity is cloned so keep the data until after cloning calls copyFrom
+           
+            if (!this.queuedEndExit)
+            {
+                this.queuedEndExit = true;
+                this.connection.sendPacket(new SChangeGameStatePacket(4, this.seenCredits ? 0.0F : 1.0F));
+                this.seenCredits = true;
+            }
+
+            return this;
+        }
+        else
+        {
+            ServerWorld serverworld = this.server.getWorld(dimensiontype);
+            this.dimension = destination;
+            ServerWorld serverworld1 = this.server.getWorld(destination);
+            WorldInfo worldinfo = serverworld1.getWorldInfo();
+            Reflector.call(Reflector.NetworkHooks_sendDimensionDataPacket, this.connection.netManager, this);
+            this.connection.sendPacket(new SRespawnPacket(destination, WorldInfo.byHashing(worldinfo.getSeed()), worldinfo.getGenerator(), this.interactionManager.getGameType()));
+            this.connection.sendPacket(new SServerDifficultyPacket(worldinfo.getDifficulty(), worldinfo.isDifficultyLocked()));
+            PlayerList playerlist = this.server.getPlayerList();
+            playerlist.updatePermissionLevel(this);
+            Reflector.call(serverworld, Reflector.ServerWorld_removeEntity, this, true);
+            Reflector.call(this, Reflector.Entity_revive);
+            Entity e = teleporter.placeEntity(this, serverworld, serverworld1, this.rotationYaw, spawnPortal -> {//Forge: Start vanilla logic
+	            double d0 = this.getPosX();
+	            double d1 = this.getPosY();
+	            double d2 = this.getPosZ();
+	            float f = this.rotationPitch;
+	            float f1 = this.rotationYaw;
+	            double d3 = 8.0D;
+	            float f2 = f1;
+	            serverworld.getProfiler().startSection("moving");
+	            Reflector.callDouble(serverworld, Reflector.ForgeDimension_getMovementFactor);
+	            double moveFactor = Reflector.callDouble(serverworld, Reflector.ForgeDimension_getMovementFactor) / Reflector.callDouble(serverworld1, Reflector.ForgeDimension_getMovementFactor);
+	            d0 *= moveFactor;
+	            d2 *= moveFactor;
+	            if (dimensiontype == DimensionType.OVERWORLD && destination == DimensionType.THE_NETHER)
+	            {
+	                this.enteredNetherPosition = this.getPositionVec();
+	            }
+	            else if (dimensiontype == DimensionType.OVERWORLD && destination == DimensionType.THE_END)
+	            {
+	                BlockPos blockpos = serverworld1.getSpawnCoordinate();
+	                d0 = (double)blockpos.getX();
+	                d1 = (double)blockpos.getY();
+	                d2 = (double)blockpos.getZ();
+	                f1 = 90.0F;
+	                f = 0.0F;
+	            }
+	
+	            this.setLocationAndAngles(d0, d1, d2, f1, f);
+	            serverworld.getProfiler().endSection();
+	            serverworld.getProfiler().startSection("placing");
+	            double d7 = Math.min(-2.9999872E7D, serverworld1.getWorldBorder().minX() + 16.0D);
+	            double d4 = Math.min(-2.9999872E7D, serverworld1.getWorldBorder().minZ() + 16.0D);
+	            double d5 = Math.min(2.9999872E7D, serverworld1.getWorldBorder().maxX() - 16.0D);
+	            double d6 = Math.min(2.9999872E7D, serverworld1.getWorldBorder().maxZ() - 16.0D);
+	            d0 = MathHelper.clamp(d0, d7, d5);
+	            d2 = MathHelper.clamp(d2, d4, d6);
+	            this.setLocationAndAngles(d0, d1, d2, f1, f);
+	
+	            if (destination == DimensionType.THE_END)
+	            {
+	                int i = MathHelper.floor(this.getPosX());
+	                int j = MathHelper.floor(this.getPosY()) - 1;
+	                int k = MathHelper.floor(this.getPosZ());
+	                int l = 1;
+	                int i1 = 0;
+	
+	                for (int j1 = -2; j1 <= 2; ++j1)
+	                {
+	                    for (int k1 = -2; k1 <= 2; ++k1)
+	                    {
+	                        for (int l1 = -1; l1 < 3; ++l1)
+	                        {
+	                            int i2 = i + k1 * 1 + j1 * 0;
+	                            int j2 = j + l1;
+	                            int k2 = k + k1 * 0 - j1 * 1;
+	                            boolean flag = l1 < 0;
+	                            serverworld1.setBlockState(new BlockPos(i2, j2, k2), flag ? Blocks.OBSIDIAN.getDefaultState() : Blocks.AIR.getDefaultState());
+	                        }
+	                    }
+	                }
+	
+	                this.setLocationAndAngles((double)i, (double)j, (double)k, f1, 0.0F);
+	                this.setMotion(Vec3d.ZERO);
+	            }
+	            else if (spawnPortal && !serverworld1.getDefaultTeleporter().placeInPortal(this, f2))
+	            {
+	                serverworld1.getDefaultTeleporter().makePortal(this);
+	                serverworld1.getDefaultTeleporter().placeInPortal(this, f2);
+	            }
+	
+	            serverworld.getProfiler().endSection();
+	            this.setWorld(serverworld1);
+	            serverworld1.addDuringPortalTeleport(this);
+	            this.func_213846_b(serverworld);
+	            this.connection.setPlayerLocation(this.getPosX(), this.getPosY(), this.getPosZ(), f1, f);
+	            return this;//forge: this is part of the ITeleporter patch
+            });//Forge: End vanilla logic
+            if (e != this) throw new java.lang.IllegalArgumentException(String.format("Teleporter %s returned not the player entity but instead %s, expected PlayerEntity %s", teleporter, e, this));
+            this.interactionManager.setWorld(serverworld1);
+            this.connection.sendPacket(new SPlayerAbilitiesPacket(this.abilities));
+            playerlist.sendWorldInfo(this, serverworld1);
+            playerlist.sendInventory(this);
+
+            for (EffectInstance effectinstance : this.getActivePotionEffects())
+            {
+                this.connection.sendPacket(new SPlayEntityEffectPacket(this.getEntityId(), effectinstance));
+            }
+
+            this.connection.sendPacket(new SPlaySoundEventPacket(1032, BlockPos.ZERO, 0, false));
+            this.lastExperience = -1;
+            this.lastHealth = -1.0F;
+            this.lastFoodLevel = -1;
+            Reflector.call(Reflector.BasicEventHooks_firePlayerChangedDimensionEvent, this.dimension, destination);
+            return this;
+        }
+    }
+    
     private void func_213846_b(ServerWorld p_213846_1_)
     {
         DimensionType dimensiontype = p_213846_1_.dimension.getType();
@@ -971,6 +1139,7 @@
                 this.connection.sendPacket(new SOpenWindowPacket(container.windowId, container.getType(), p_213829_1_.getDisplayName()));
                 container.addListener(this);
                 this.openContainer = container;
+                Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.PlayerContainerEvent_Open_Constructor, this, this.openContainer));
                 return OptionalInt.of(this.currentWindowId);
             }
         }
@@ -992,6 +1161,7 @@
         this.connection.sendPacket(new SOpenHorseWindowPacket(this.currentWindowId, inventoryIn.getSizeInventory(), horse.getEntityId()));
         this.openContainer = new HorseInventoryContainer(this.currentWindowId, this.inventory, inventoryIn, horse);
         this.openContainer.addListener(this);
+        Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.PlayerContainerEvent_Open_Constructor, this, this.openContainer));
     }
 
     public void openBook(ItemStack stack, Hand hand)
@@ -1064,6 +1234,7 @@
     public void closeContainer()
     {
         this.openContainer.onContainerClosed(this);
+        Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.PlayerContainerEvent_Close_Constructor, this, this.openContainer));
         this.openContainer = this.container;
     }
 
@@ -1213,6 +1384,23 @@
         this.enteredNetherPosition = that.enteredNetherPosition;
         this.setLeftShoulderEntity(that.getLeftShoulderEntity());
         this.setRightShoulderEntity(that.getRightShoulderEntity());
+        //Forge
+    	Reflector.setFieldValue(this, Reflector.ForgePlayerEntity_spawnPosMap, Reflector.getFieldValue(that, Reflector.ForgePlayerEntity_spawnPosMap));
+		Reflector.setFieldValue(this, Reflector.ForgePlayerEntity_spawnForcedMap, Reflector.getFieldValue(that, Reflector.ForgePlayerEntity_spawnForcedMap));
+        if(that.dimension != DimensionType.OVERWORLD) {
+			MCReflection.PlayerEntity_spawnPos.set(this, MCReflection.PlayerEntity_spawnPos.get(that));
+			MCReflection.PlayerEntity_spawnForced.set(this, MCReflection.PlayerEntity_spawnForced.get(that));
+        }
+
+        //Copy over a section of the Entity Data from the old player.
+        //Allows mods to specify data that persists after players respawn.       
+        CompoundNBT old = (CompoundNBT)Reflector.call(that, Reflector.Entity_getPersistentData);
+		if (old.contains("PlayerPersisted")) {
+			((CompoundNBT)Reflector.call(this, Reflector.Entity_getPersistentData)).put("PlayerPersisted", old.getCompound("PlayerPersisted"));
+		}
+		Reflector.callVoid(Reflector.ForgeEventFactory_onPlayerClone, this, that, !keepEverything);
+
+        //
     }
 
     protected void onNewPotionEffect(EffectInstance id)
@@ -1489,14 +1677,32 @@
         }
         else
         {
+        	//Forge
+        	 if (Reflector.ForgeHooks_onTravelToDimension.exists() && !Reflector.callBoolean(Reflector.ForgeHooks_onTravelToDimension, this, newWorld.dimension.getType())) {
+        		 return;      		 
+        	 }
+        	 //
+        	 
+            DimensionType oldDimension = this.dimension;
+
             ServerWorld serverworld = this.getServerWorld();
             this.dimension = newWorld.dimension.getType();
             WorldInfo worldinfo = newWorld.getWorldInfo();
+            
+            Reflector.call(Reflector.NetworkHooks_sendDimensionDataPacket, this.connection.netManager, this);
+
             this.connection.sendPacket(new SRespawnPacket(this.dimension, WorldInfo.byHashing(worldinfo.getSeed()), worldinfo.getGenerator(), this.interactionManager.getGameType()));
             this.connection.sendPacket(new SServerDifficultyPacket(worldinfo.getDifficulty(), worldinfo.isDifficultyLocked()));
             this.server.getPlayerList().updatePermissionLevel(this);
-            serverworld.removePlayer(this);
-            this.removed = false;
+            //Forge
+            if(Reflector.ServerWorld_removePlayer.exists()) {
+                Reflector.call(serverworld, Reflector.ServerWorld_removePlayer, this, true);
+                Reflector.call(this, Reflector.Entity_revive);
+            } else {
+            	//
+                serverworld.removePlayer(this);
+                this.removed = false;
+            }
             this.setLocationAndAngles(x, y, z, yaw, pitch);
             this.setWorld(newWorld);
             newWorld.addDuringCommandTeleport(this);
@@ -1505,6 +1711,66 @@
             this.interactionManager.setWorld(newWorld);
             this.server.getPlayerList().sendWorldInfo(this, newWorld);
             this.server.getPlayerList().sendInventory(this);
+            //Forge
+            Reflector.call(Reflector.BasicEventHooks_firePlayerChangedDimensionEvent, oldDimension, this.dimension);
+            //
+        }
+    }
+	@Override
+	public void spawnSweepParticles() {
+		ServerVivePlayer vp = NetworkHelper.vivePlayers.get(this.getUniqueID());
+		if (vp == null || vp.isVR() == false) {
+			super.spawnSweepParticles();
+		} else {
+			// VIVECRAFT USE CONTROLLER - which controller? have to assume 0.
+
+			Vec3d aim = vp.getControllerDir(0);
+			float yaw = (float) Math.toDegrees(Math.atan2(aim.x, -aim.z));
+
+			double d0 = (double) (-MathHelper.sin(yaw * 0.017453292F));
+			double d1 = (double) MathHelper.cos(yaw * 0.017453292F);
+
+			Vec3d pos = vp.getControllerPos(0);
+
+			if (this.world instanceof ServerWorld) // has to be
+			{
+				((ServerWorld) this.world).spawnParticle(ParticleTypes.SWEEP_ATTACK, pos.x + d0, pos.y, pos.z + d1, 0, d0,
+						0.0D, d1, 0.0D);
+			}
+			// END
+		}
+	}
+
+	//Vivecraft override from LivingEntity because addItemParticles is private
+	@Override
+    protected void func_226293_b_(ItemStack p_226293_1_, int p_226293_2_)
+    {
+        if (!p_226293_1_.isEmpty() && this.isHandActive())
+        {
+            if (p_226293_1_.getUseAction() == UseAction.DRINK)
+            {
+                this.playSound(this.getDrinkSound(p_226293_1_), 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
+            }
+
+            if (p_226293_1_.getUseAction() == UseAction.EAT)
+            {
+                this.addItemParticles(p_226293_1_, p_226293_2_);
+                this.playSound(this.getEatSound(p_226293_1_), 0.5F + 0.5F * (float)this.rand.nextInt(2), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+            }
+        }
+    }
+
+    private void addItemParticles(ItemStack stack, int count)
+    {
+
+        for (int i = 0; i < count; ++i)
+        {
+            Vec3d vec3d = new Vec3d(((double)this.rand.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+            vec3d = vec3d.rotatePitch(-this.rotationPitch * ((float)Math.PI / 180F));
+            vec3d = vec3d.rotateYaw(-this.rotationYaw * ((float)Math.PI / 180F));
+            double d0 = (double)(-this.rand.nextFloat()) * 0.6D - 0.3D;
+            Vec3d vec3d1 = new Vec3d(((double)this.rand.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
+            this.world.addParticle(new ItemParticleData(ParticleTypes.ITEM, stack), vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z);
         }
     }
 
@@ -1542,6 +1808,7 @@
         return new SSpawnPlayerPacket(this);
     }
 
+    @Override
     public ItemEntity dropItem(ItemStack droppedItem, boolean dropAround, boolean traceItem)
     {
         ItemEntity itementity = super.dropItem(droppedItem, dropAround, traceItem);
@@ -1552,7 +1819,28 @@
         }
         else
         {
-            this.world.addEntity(itementity);
+        	//Vivecraft, set spwanpos of dropped item.
+            ServerVivePlayer vp = NetworkHelper.vivePlayers.get(this.getUniqueID());    
+            if (vp != null && vp.isVR() && !dropAround) {
+    			Vec3d pos = vp.getControllerPos(0);    	
+    			Vec3d aim = vp.getControllerDir(0);
+    			float f2 = 0.3F;
+    			itementity.setMotion(aim.x * f2, aim.y * f2, aim.z * f2);
+    			itementity.setPosition(pos.getX() + itementity.getMotion().getX(), 
+    					pos.getY()+itementity.getMotion().getY(), 
+    					pos.getZ() + itementity.getMotion().getZ());
+            }
+            //      
+            //Forge
+            Collection<ItemEntity> capture = (Collection<ItemEntity>) Reflector.call(this, Reflector.Entity_captureDrops);
+   
+            if(capture != null) {
+                capture.add(itementity);
+            }
+            //
+            else
+            	this.world.addEntity(itementity);
+            
             ItemStack itemstack = itementity.getItem();
 
             if (traceItem)
@@ -1568,4 +1856,4 @@
             return itementity;
         }
     }
-}
+}
\ No newline at end of file
