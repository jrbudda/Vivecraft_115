--- a/net/minecraft/network/play/ServerPlayNetHandler.java
+++ b/net/minecraft/network/play/ServerPlayNetHandler.java
@@ -8,6 +8,12 @@
 import io.netty.util.concurrent.GenericFutureListener;
 import it.unimi.dsi.fastutil.ints.Int2ShortMap;
 import it.unimi.dsi.fastutil.ints.Int2ShortOpenHashMap;
+
+import java.io.BufferedReader;
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
 import java.util.Collections;
 import java.util.Set;
 import javax.annotation.Nullable;
@@ -16,6 +22,7 @@
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
 import net.minecraft.block.CommandBlockBlock;
+import net.minecraft.client.Minecraft;
 import net.minecraft.command.CommandSource;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
@@ -23,6 +30,7 @@
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.IJumpingMount;
 import net.minecraft.entity.MoverType;
+import net.minecraft.entity.ai.attributes.IAttribute;
 import net.minecraft.entity.item.BoatEntity;
 import net.minecraft.entity.item.ExperienceOrbEntity;
 import net.minecraft.entity.item.ItemEntity;
@@ -45,6 +53,7 @@
 import net.minecraft.nbt.StringNBT;
 import net.minecraft.network.IPacket;
 import net.minecraft.network.NetworkManager;
+import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.PacketThreadUtil;
 import net.minecraft.network.play.client.CAnimateHandPacket;
 import net.minecraft.network.play.client.CChatMessagePacket;
@@ -129,8 +138,15 @@
 import net.minecraft.world.IWorldReader;
 import net.minecraft.world.dimension.DimensionType;
 import net.minecraft.world.server.ServerWorld;
+import net.optifine.reflect.Reflector;
+import net.optifine.reflect.ReflectorField;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.NetworkHelper.PacketDiscriminators;
+import org.vivecraft.api.ServerVivePlayer;
+import org.vivecraft.reflection.MCReflection;
 
 public class ServerPlayNetHandler implements IServerPlayNetHandler
 {
@@ -270,6 +286,8 @@
         {
             this.disconnect(new TranslationTextComponent("multiplayer.disconnect.idling"));
         }
+        //VIVECRAFT
+        NetworkHelper.sendPosData(player); //has to go somewhere?
     }
 
     public void captureCurrentPosition()
@@ -385,11 +403,17 @@
                 }
 
                 entity.setPositionAndRotation(d3, d4, d5, f, f1);
+                //Forge
+                this.player.setPositionAndRotation(d3, d4, d5, this.player.rotationYaw, this.player.rotationPitch); // Forge - Resync player position on vehicle moving
+                //
                 boolean flag2 = serverworld.hasNoCollisions(entity, entity.getBoundingBox().shrink(0.0625D));
 
                 if (flag && (flag1 || !flag2))
                 {
                     entity.setPositionAndRotation(d0, d1, d2, f, f1);
+                    //Forge
+                    this.player.setPositionAndRotation(d3, d4, d5, this.player.rotationYaw, this.player.rotationPitch); // Forge - Resync player position on vehicle moving
+                    //
                     this.netManager.sendPacket(new SMoveVehiclePacket(entity));
                     return;
                 }
@@ -1051,7 +1075,15 @@
 
         if (blockpos.getY() < this.server.getBuildLimit() - 1 || direction != Direction.UP && blockpos.getY() < this.server.getBuildLimit())
         {
-            if (this.targetPos == null && this.player.getDistanceSq((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.5D, (double)blockpos.getZ() + 0.5D) < 64.0D && serverworld.isBlockModifiable(this.player, blockpos))
+        	double dist = 8D;
+        	
+        	//Forge
+        	if(Reflector.ForgePlayer_REACH_DISTANCE.exists())
+        		dist = player.getAttribute((IAttribute) Reflector.getFieldValue(Reflector.ForgePlayer_REACH_DISTANCE)).getValue() + 3;
+        	//
+        	
+            dist *= dist;
+            if (this.targetPos == null && this.player.getDistanceSq((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.5D, (double)blockpos.getZ() + 0.5D) < dist && serverworld.isBlockModifiable(this.player, blockpos))
             {
                 ActionResultType actionresulttype = this.player.interactionManager.func_219441_a(this.player, serverworld, itemstack, hand, blockraytraceresult);
 
@@ -1217,8 +1249,16 @@
             }
             else
             {
-                ITextComponent itextcomponent = new TranslationTextComponent("chat.type.text", this.player.getDisplayName(), s);
-                this.server.getPlayerList().sendMessage(itextcomponent, false);
+            	//Forge
+            	if(Reflector.ForgeHooks_newChatWithLinks.exists()) {
+            		ITextComponent itextcomponent = new TranslationTextComponent("chat.type.text", this.player.getDisplayName(), Reflector.call(Reflector.ForgeHooks_newChatWithLinks, s));
+                	itextcomponent = (ITextComponent) Reflector.call(Reflector.ForgeHooks_onServerChatEvent, this, s, itextcomponent);
+                	if (itextcomponent == null) return;
+            	} else {
+            		//
+	                ITextComponent itextcomponent = new TranslationTextComponent("chat.type.text", this.player.getDisplayName(), s);
+	                this.server.getPlayerList().sendMessage(itextcomponent, false);
+            	}
             }
 
             this.chatSpamThresholdCount += 20;
@@ -1345,6 +1385,11 @@
                 else if (packetIn.getAction() == CUseEntityPacket.Action.INTERACT_AT)
                 {
                     Hand hand1 = packetIn.getHand();
+                                       
+                    //Forge
+                    if (Reflector.call(Reflector.ForgeHooks_onInteractEntityAt, player, entity, packetIn.getHitVec(), hand1) != null) return;
+                    //
+                    
                     ActionResultType actionresulttype = entity.applyPlayerInteraction(this.player, packetIn.getHitVec(), hand1);
 
                     if (actionresulttype.isSuccess())
@@ -1388,9 +1433,11 @@
                     {
                         return;
                     }
-
-                    this.player = this.server.getPlayerList().recreatePlayerEntity(this.player, DimensionType.OVERWORLD, false);
-
+                    
+                    //Forge - use player.dimension - ok for vanilla?
+                    this.player = this.server.getPlayerList().recreatePlayerEntity(this.player, this.player.dimension, false);
+                    //
+                    
                     if (this.server.isHardcore())
                     {
                         this.player.setGameType(GameType.SPECTATOR);
@@ -1612,6 +1659,109 @@
 
     public void processCustomPayload(CCustomPayloadPacket packetIn)
     {
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.player.getServerWorld());
+        //Forge
+        Reflector.call(Reflector.NetworkHooks_onCustomPayload, packetIn, this.netManager);
+        //
+        
+        PacketBuffer rawdata = (PacketBuffer) MCReflection.CCustomPayloadPacket_data.get(packetIn);
+        ResourceLocation channel = (ResourceLocation) MCReflection.CCustomPayloadPacket_channel.get(packetIn);
+
+        String s = channel.getNamespace();
+        String d = channel.getPath();
+        
+        // VIVE START - client querying if server is running this mod too      		
+        if (s.equalsIgnoreCase("vivecraft") && d.equalsIgnoreCase("data"))
+        {
+        	int len = rawdata.readableBytes();
+        	PacketDiscriminators dis = PacketDiscriminators.values()[rawdata.readByte()];
+    		byte[] data = new byte[len-1];
+    		rawdata.readBytes(data);
+    		ServerVivePlayer vp = NetworkHelper.vivePlayers.get(this.player.getUniqueID());
+    		if(vp == null && dis != PacketDiscriminators.VERSION) {
+    			//how?
+    			return;
+    		}
+        	switch (dis){
+        	case VERSION:
+            	String ver = Minecraft.getInstance().minecriftVerString;
+            	sendPacket(NetworkHelper.getVivecraftServerPacket(PacketDiscriminators.VERSION,ver));
+            	sendPacket(NetworkHelper.getVivecraftServerPacket(PacketDiscriminators.REQUESTDATA, new byte[]{}));  
+            	sendPacket(NetworkHelper.getVivecraftServerPacket(PacketDiscriminators.CLIMBING, new byte[]{1, 0}));
+            	sendPacket(NetworkHelper.getVivecraftServerPacket(PacketDiscriminators.TELEPORT, new byte[]{})); 
+    			vp = new ServerVivePlayer(this.player);
+            	NetworkHelper.vivePlayers.put(this.player.getUniqueID(), vp);
+            	
+            	BufferedReader br = new BufferedReader(
+            			new InputStreamReader(
+            					new DataInputStream(
+            							new ByteArrayInputStream(data))));
+    			
+    			String v;
+				try {
+					v = br.readLine();
+					if(v.contains("NONVR")){
+						this.player.sendMessage(new StringTextComponent("NONVR: " + this.player.getDisplayName().getFormattedText()));
+						vp.setVR(false);
+					}
+					else{
+						this.player.sendMessage(new StringTextComponent("VR: " + this.player.getDisplayName().getFormattedText()));
+						vp.setVR(true);
+					}  
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}     
+        		break;
+    		case CONTROLLER0DATA:
+    			vp.controller0data = data;
+    			break;
+    		case CONTROLLER1DATA:
+    			vp.controller1data = data;
+    			break;
+    		case DRAW:
+    			vp.draw = data;
+    			break;
+    		case HEADDATA:
+    			vp.hmdData = data;
+    			break;	
+    		case MOVEMODE:
+    			break;
+    		case REQUESTDATA:
+    			//only we can use that word.
+    			break;
+    		case WORLDSCALE:
+            	rawdata.resetReaderIndex();
+            	rawdata.readByte();
+    			vp.worldScale = rawdata.readFloat();
+    			break;
+    		case HEIGHT:
+            	rawdata.resetReaderIndex();
+            	rawdata.readByte();
+    			vp.heightscale = rawdata.readFloat();
+    			break;			
+    		case TELEPORT:
+            	rawdata.resetReaderIndex();
+            	rawdata.readByte();
+    			float x = rawdata.readFloat();
+				float y = rawdata.readFloat();
+				float z = rawdata.readFloat();
+				this.player.setPositionAndRotation(x, y, z, this.player.rotationYaw, this.player.rotationPitch);
+    			break;
+    		case CLIMBING:
+    			this.player.fallDistance = 0;
+    		case ACTIVEHAND:
+    			rawdata.resetReaderIndex();
+    			rawdata.readByte();
+    			vp.activeHand = rawdata.readByte();
+    			if (vp.isSeated())
+    				vp.activeHand = 0;
+    			break;	
+        	default:
+        		break;
+        	}
+        }
+        // VIVE END - vivecraft packets
     }
 
     public void func_217263_a(CSetDifficultyPacket p_217263_1_)
